#!/bin/bash 

# tdclient.shl
# Script to list, send, or receive files from SAIG Portal
# https://github.com/hencodes/ed_tools/blob/master/tdclient.shl
#
# Exit Codes:
# 1 - Script called incorrectly
# 2 - Error setting permissions
# 3 - Invalid aid year
# 4 - File rollup error
# 5 - Error communicating with portal
# 6 - No files available

# Functions
## Great example of me refusing to use here docs
tdclient_help() {
    echo "${tdclient_script%.*}" 
    echo "Download, transmit, or send files to and from the SAIG Portal."
    echo
    echo "Usage:"
    echo "  ${tdclient_script} listavail [-y <year>] [-f <filter>]"
    echo "  ${tdclient_script} download -y <year> -f <filter> [-z]"
    echo "  ${tdclient_script} send -f <filter> [-y <year>]"
    echo
    echo "Options:"
    echo "  -y   The 2 digit aid year"
    echo "  -f   Filter for the filename being sent or received"
    echo "  -z   Strip headers and concatenate files received" 
    echo 
    echo "Examples:"
    echo "  tdclient download -y 17 -f \"I*\" -z"
    echo "  tdclient listavail"
    echo "  tdclient send -f \"corr*\" -y 17"
    echo
    exit 1  
}

## Receives last exit status, error message, and error code if failed
tdclient_check_fail() {
    [ $1 -ne 0 ] && (echo "${tdclient_script} - ${2}" >&2) && exit $3
}

## Pulls down a list of all the available files from the portal
tdclient_pull_avail() {
    "${tdclient_home}/tdclientc" "network=${tdclient_portal}" reset query_status=AVAILABLE \
        query_list "query_file=${tdclient_temp_query}" &> /dev/null
    tdclient_check_fail $? "Error communicating with the portal" 5
}

## Extract a list of classes from the query file 
tdclient_classes() {
    sed -nr 's/^.+,CLS=([A-Z0-9]+),.+$/\1/p' ${tdclient_temp_query} | sort -u
}

## Filter the list of classes and display unique
tdclient_classes_match() {
    tdclient_check=FAIL
    for tdclient_class in $(tdclient_classes); do
        # Should work even when filter is unset 
        if [[ $tdclient_class == ${tdclient_filter} ]]; then
            tdclient_regex="^.+${tdclient_year}[A-Z]{2}$"
            if [[ $tdclient_class =~ $tdclient_regex || -z ${tdclient_year} ]]; then
                echo $tdclient_class    
                tdclient_check=WIN
            fi
        fi
    done
    [ $tdclient_check = WIN ] || tdclient_check_fail $? "No matching classes found on portal" 6
}

## Combines all downloaded files into a single .tap file
tdclient_zip() {
    for tdclient_file in $(ls "${tdclient_load_dir}/tdclient-*-${tdclient_date}.dat"); do
        cat "${tdclient_file}" | grep "^[0-9]" >> \
            "${tdclient_load_dir}/td-${tdclient_filter}${tdclient_year}-${tdclient_date}.tap"
        tdclient_check_fail $? "Error rolling up files" 4 
    done 
}

## Submit files to the SAIG Portal
tdclient_send() {
    # Not allowing send with wildcard. Way to dangerous!
    [ "${tdclient_filter}" = "*" ] && tdclient_help

    tdclient_check=FAIL
    for tdclient_file in $(find "${tdclient_send_dir}" -iname "${tdclient_filter}.dat" -mtime -1); do
        if [[ -z $tdclient_year || $tdclient_file =~ *$tdclient_year* ]]; then
            "${tdclient_home}/tdclientc" "network=${tdclient_portal}" reset \
             "transfer=(name=$(basename "$tdclient_file") \
              senduserid=${tdclient_username} \
              send=$tdclient_file \
              OTHER_COMP_PARMS='SECFILE=${tdclient_home}/secfile.txt')"

            tdclient_check_fail $? "Error sending file" 5 
            mv "$tdclient_file" "$tdclient_file.sent"
            tdclient_check=WIN
        fi
    done

    [ $tdclient_check = WIN ] || tdclient_check_fail $? "Found no files to send" 6
}

## Download files from the portal
tdclient_download() {
    # Require that both the filter and the year be set
    if [ "${tdclient_filter}" = "*" ] || [ -z "${tdclient_year}" ]; then
        tdclient_help
    fi

    for tdclient_class in $(tdclient_classes_match); do
        "${tdclient_home}/tdclientc" "network=${tdclient_portal}" \
             "transfer=(name=${tdclient_class,,} \
              receiveclass=$tdclient_class \
              receive=${tdclient_load_dir}/tdclient-${tdclient_class,,}-$tdclient_date.dat)"
        tdclient_check_fail $? "Error receiving file" 5
    done

    [ -n $tdclient_zip ] && tdclient_zip
}

## Check the permissions on the ini files 
tdclient_permissions() {
    chmod u+rw ${tdclient_home}/*.ini >& /dev/null
    tdclient_check_fail $? "Error setting ini file permissions" 2
}

## Make sure a valid year was passed
tdclient_check_year() {
    if [ -n "${tdclient_year}" ]; then
        tdclient_regex='^[0-9]{4}$'
        tdclient_years="$(echo "${tdclient_year} - 1" | bc)${tdclient_year}"
        [[ "${tdclient_years}" =~ $tdclient_regex ]] || tdclient_check_fail $? "Invalid aid year" 3 
    fi
}

# Variables
## User-Defined (may be defined in your ~/.bash_profile)
### tdclient_home     - The home folder of the tdclientc application
### tdclient_portal   - Portal name in the tdclient.ini file
### tdclient_tap_dir  - Output directory for tap and dat files
### tdclient_send_dir - Input directory for files to be sent
### tdclient_username - FTP Username (starts with TG) 

# Set only if unset or empty
[ -z "$tdclient_home" ] && tdclient_home=/opt/tdclient
[ -z "$tdclient_portal" ] && tdclient_portal=saigportal
[ -z "$tdclient_tap_dir" ] && tdclient_tap_dir="$tdclient_home/out" 
[ -z "$tdclient_send_dir" ] && tdclient_send_dir="$tdclient_home/in"
[ -z "$tdclient_username" ] && tdclient_username=TGSETME

## Exports (keep these small)
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$tdclient_home
export LD_LIBRARY_PATH

## Initialize varibales used by script (DO NOT TOUCH)
tdclient_date="$(date +"%Y%m%d%H%M")"
tdclient_script="$(basename $0)"
tdclient_temp_query="/tmp/${tdclient_script%.*}-query-${tdclient_date}.log"

## Process parameters
[ -z "${1}" ] && tdclient_help 
tdclient_command="${1^^}"
shift

while getopts ":f:y:z" opt; do
    case $opt in
        f)  
            tdclient_filter="${OPTARG}"
            ;;
        y)  
            tdclient_year="$OPTARG"
            ;;
        z)  
            tdclient_zip=YES
            ;;
        :) 
            tdclient_help       
            ;;
        \?)
            tdclient_help
            ;;
    esac
done

# Set-Up for Main Script 
if [ -z "${tdclient_filter}" ]; then 
    tdclient_filter="*"
else
    # Some functional users use a percent as a wildcard
    tdclient_filter="$(echo "${tdclient_filter}" | sed 's/%/*/')"
fi
 
tdclient_permissions
tdclient_check_year

# Main Script
case "${tdclient_command}" in 
    LISTAVAIL)
        tdclient_pull_avail
        tdclient_classes_match
    ;;
    DOWNLOAD) 
        tdclient_pull_avail
        tdclient_download 
    ;;  
    SEND)
        tdclient_send 
    ;;
    *)
        tdclient_help
    ;;
esac

# Tear-Down for Main Script
tdclient_permissions

[ -e "${tdclient_temp_query}" ] && rm "${tdclient_temp_query}"
exit 0
